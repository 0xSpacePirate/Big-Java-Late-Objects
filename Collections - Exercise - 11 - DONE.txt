package com.bonche;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class Main {
    public static void main(String[] args) {

//        ••• P 15.11 Write a class Polynomial that stores a polynomial such as
//                p(x) = 5x10 + 9x7 - x - 10
//        as a linked list of terms. A term contains the coefficient and the power of x. For
//        example, you would store p(x) as
//                (5,10),(9,7),(-1,1),(-10,0)
//
//        Supply methods to add, multiply, and print polynomials. Supply a constructor that
//        makes a polynomial from a single term. For example, the polynomial p can be
//        constructed as
//        Polynomial p = new Polynomial(new Term(-10, 0));
//        p.add(new Polynomial(new Term(-1, 1)));
//        p.add(new Polynomial(new Term(9, 7)));
//        p.add(new Polynomial(new Term(5, 10)));
//        Then compute p(x) × p(x) .
//                Polynomial q = p.multiply(p);
//        q.print();

        Polynomial polynomial = new Polynomial(new Term(4,2));
        polynomial.add(new Term(5,-2));
        polynomial.add(new Term(3,-4));
        polynomial.add(new Term(8,-1));
        polynomial.add(new Term(3,-3));
        polynomial.add(new Term(5,-4));

        polynomial.calculate();

        Polynomial polynomial1 = new Polynomial(new Term(-2,4));
        polynomial1.add(new Term(2,2));
        polynomial1.add(new Term(4,2));
        polynomial1.add(new Term(4,2));
        polynomial1.add(new Term(4,2));
        polynomial1.add(new Term(4,2));

        polynomial1.calculate();

    }
}

package com.bonche;

import java.util.LinkedList;

public class Polynomial {

    private Term term;
    private LinkedList<Term> linkedList;

    public Polynomial(Term term) {
        this.term = term;
        this.linkedList = new LinkedList<>();
        this.linkedList.add(term);
    }

    public Term getTerm() {
        return term;
    }

    public void calculate() {
        double total = 0;
        String output = "";
        if (this.linkedList.size() != 0) {
            for (int i = 0; i < this.linkedList.size(); i++) {
                if (i == this.linkedList.size() - 1) {
                    total += (this.linkedList.get(i).getFirstNumber() * this.linkedList.get(i).getSecondNumber());
                    output += this.linkedList.get(i).getFirstNumber() + "x" + this.linkedList.get(i).getSecondNumber() + " = " + total;
                } else {
                    total += (this.linkedList.get(i).getFirstNumber() * this.linkedList.get(i).getSecondNumber());
                    output += this.linkedList.get(i).getFirstNumber() + "x" + this.linkedList.get(i).getSecondNumber() + " + ";
                }
            }
            System.out.println("- - - - - - - - - - -");
            System.out.println(output);
        } else {
            System.out.println("There is nothing to calculate!");
        }
    }

    public void add(Term term) {
        this.linkedList.add(term);
        System.out.println("Term added!");
    }
}



package com.bonche;

public class Term{

    private int firstNumber;
    private int secondNumber;

    public Term(int firstNumber, int secondNumber){
        this.firstNumber = firstNumber;
        this.secondNumber = secondNumber;
    }

    public int getFirstNumber() {return firstNumber;}
    public int getSecondNumber() {return secondNumber;}
}
