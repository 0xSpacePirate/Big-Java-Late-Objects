package com.bonche;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class Main {

    public static void main(String[] args) {

//•• P 15.8 Implement the sieve of Eratosthenes: a method for computing
//        prime numbers, known to the ancient Greeks. This method
//        will compute all prime numbers up to n. Choose an n.
//                First insert all numbers from 2 to n into a set. Then erase all
//        multiples of 2 (except 2); that is, 4, 6, 8, 10, 12, . . . . Erase
//        all multiples of 3; that is, 6, 9, 12, 15, . . . . Go up to n. Then
//        print the set.

        Set<Integer> set = new HashSet<>();
        sieveOfEratosthenes(set, 20);

    }

    public static void sieveOfEratosthenes(Set<Integer> set, int n){
        System.out.println("All numbers:");
        for(int i = 0; i < n; i++){System.out.print(i + " ");}
        System.out.println("\n- - - - - - - - - -");
        System.out.println("All numbers from 2 to n:");
        for(int i = 2; i < n; i++){
            set.add(i);
            System.out.print(i + " ");
        }
        System.out.println("\n- - - - - - - - - -");
        System.out.println("After all erased multiples of 2 (except 2):");
        for(int i = 0; i < set.size(); i++){
            if(i % 2 == 0 && i != 2) {
                set.remove(i);
            }
        }
        System.out.print(set + " ");
        System.out.println("\n- - - - - - - - - -");
        System.out.println("After all erased multiples of 3:");
        for(int i = 0; i < set.size(); i++){
            if(i % 3 == 0) {
                set.remove(i);
            }
        }
        System.out.print(set + " ");
    }
}