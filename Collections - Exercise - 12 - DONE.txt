package com.bonche;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class Main {
    public static void main(String[] args) {

//        ••• P 15.11 Write a class Polynomial that stores a polynomial such as
//                p(x) = 5x10 + 9x7 - x - 10
//        as a linked list of terms. A term contains the coefficient and the power of x. For
//        example, you would store p(x) as
//                (5,10),(9,7),(-1,1),(-10,0)
//
//        Supply methods to add, multiply, and print polynomials. Supply a constructor that
//        makes a polynomial from a single term. For example, the polynomial p can be
//        constructed as
//        Polynomial p = new Polynomial(new Term(-10, 0));
//        p.add(new Polynomial(new Term(-1, 1)));
//        p.add(new Polynomial(new Term(9, 7)));
//        p.add(new Polynomial(new Term(5, 10)));
//        Then compute p(x) × p(x) .
//                Polynomial q = p.multiply(p);
//        q.print();


//        ••• P 15.12 Repeat Exercise P15.11, but use a Map<Integer, Double> for the coefficients.


        Polynomial polynomial = new Polynomial();
        polynomial.add(2,3);
        polynomial.add(2,3);
        polynomial.add(4,2);
        polynomial.add(1,8);
        polynomial.add(9,3);
        polynomial.add(4,4);

        polynomial.calculate();

        Polynomial polynomial1 = new Polynomial();
        polynomial1.add(2,3);
        polynomial1.add(5,2);
        polynomial1.add(4,7);
        polynomial1.add(6,6);

        polynomial1.calculate();

    }
}


package com.bonche;

import java.util.HashMap;
import java.util.Map;

public class Polynomial {

    private Map<Integer,Double> map;

    public Polynomial() {
        this.map = new HashMap<>();
    }

    public Map<Integer, Double> getMap() {return map;}

    public void calculate() {
        double total = 0;
        String output = "";
        int count = 0;
        if (this.map.size() != 0) {
            for (Map.Entry<Integer,Double> entry : this.map.entrySet()) {
                if (count == this.map.entrySet().size() - 1) {
                    total += (entry.getKey() * entry.getValue());
                    output += entry.getKey() + "x" + entry.getValue() + " = " + total;
                } else {
                    total += entry.getKey() * entry.getValue();
                    output += entry.getKey() + "x" + entry.getValue() + " + ";
                }
                count++;
            }
            System.out.println("- - - - - - - - - - -");
            System.out.println(output);
        } else {
            System.out.println("There is nothing to calculate!");
        }
    }

    public void add(int number, double number1) {
        this.map.put(number,number1);
        System.out.println("Term added!");
    }
}
