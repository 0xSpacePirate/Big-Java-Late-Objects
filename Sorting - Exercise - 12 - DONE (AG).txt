package com.bonche;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
import java.lang.Object;

public class Main {
    public static void main(String[] args) {

//• P14.12 Implement the radix sort algorithm described in Exercise R14.20 to sort arrays of
//numbers between 0 and 999. However, use a single auxiliary array, not ten.

//•• P14.20 Sort an array list of strings by increasing length. Hint: Supply a Comparator.

        int[] array = new int[10];
        generateArray(array);
        System.out.println("- - - - -UNSORTED- - - - -");
        printArray(array);
        System.out.println("\n- - - -RADIX SORT- - - - -");
        radixSort(array);
        printArray(array);
    }

    public static void printArray(int[] array){
        for(int i = 0; i < array.length; i++){
            System.out.printf("%2d ",array[i]);
        }
    }

    public static void generateArray(int[] array){
        for(int i = 0; i < array.length; i++){
            array[i] = (int) (Math.random() * 1000);
        }
    }

    public static void countSort(int array[], int digit){

        int[] output = new int[array.length];
        int[] count = new int[array.length];
        Arrays.fill(count,0);

        // Store count of occurrences in count[]
        for(int i = 0; i < array.length; i++){
            int value = (array[i] / digit) % 10;
            count[value]++;
        }

        // Change count[i] so that count[i] now contains
        // actual position of this digit in output[]
        for(int i = 1; i < array.length; i++){
            count[i] += count[i - 1];
        }

        // Build the output array
        for(int i = array.length - 1; i >= 0; i--){
            int aValue = (array[i] / digit) % 10;
            output[count[aValue] - 1] = array[i];
            count[aValue]--;
        }

        // Copy the output array to arr[], so that arr[] now
        // contains sorted numbers according to current digit
        for(int i = 0; i < array.length; i++){
            array[i] = output[i];
        }
    }

    public static void radixSort(int[] array) {
        int m = getMaximum(array);
        for (int i = 1; m / i > 0; i *= 10) {
            countSort(array,i);
        }
    }

    public static int getMaximum(int[] array){
        int maximum = 0;
        for(int i = 0; i < array.length; i++){
            if(array[i] > maximum){
                maximum = array[i];
            }
        }
        return maximum;
    }
}
